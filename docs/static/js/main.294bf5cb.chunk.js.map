{"version":3,"sources":["utils/firebase/config.js","utils/firebase/index.js","utils/UploadHandlers.js","context/Context.js","components/UploadForm/index.js","utils/flexibleGallery/index.js","components/Loading/index.js","components/Item/index.js","components/ImagesBlock/index.js","components/ErrorBlock/index.js","components/LoadingMain/index.js","components/App/index.js","context/Reducer.js","context/Types.js","context/State.js","index.js"],"names":["firebase","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","collection","Firebase","getData","callback","setLoaded","Function","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","addFile","file","imageSize","fileName","Date","now","name","storageRef","ref","put","then","a","getDownloadURL","imgSrc","timestamp","add","url","width","height","deleteFile","setTimeout","delete","refFromURL","UploadHandler","errorCallback","successCallback","upload","uploaded","UploadInfo","identifyUploadType","map","checkFile","type","convertFiletoJson","e","size","checkUrl","getFileTypeByUrl","fetch","res","blob","json","result","getFileNameByUrl","checkJSON","jsonImageArrName","getImageFileSize","this","allowedDropTypes","allowedUrlTypes","maxFileSizeInMb","fileCallback","urlCallback","isFile","errorText","isCorrectUrl","join","includes","isCorrectJsonFormat","img","Image","objectUrl","window","URL","webkitURL","createObjectURL","promise","Promise","resolve","reject","onload","naturalWidth","naturalHeight","onerror","src","fr","FileReader","lines","target","newArr","JSON","parse","readAsText","length","awdTypes","RegExp","source","test","substring","lastIndexOf","split","pop","trim","uploadData","uploadFile","Context","React","createContext","UploadForm","useContext","stopLoading","errorShow","useState","setUrl","className","onChange","value","placeholder","onClick","preventDefault","addByUrl","FlexibleGallery","gallery","params","init","elements","querySelectorAll","selectorElement","classList","maxRowHeight","allGalleryWidth","arrElements","preparedSizing","element","i","imgRatio","row","widthWithoutMargin","marginElement","ratio","imgWidthNew","imgHeightNew","lastRow","imgPositionLeft","imgElement","imgData","imgPositionTop","allGalleryHeight","style","imageData","left","top","curWidth","points","Object","keys","mediaMaxRowHeight","clientWidth","defaultParams","initGallery","block","handlerFunction","assign","addEventListener","Loading","Item","index","deleteData","selectItem","selected","state","openGallery","useLightgallery","selectOut","useOnclickOutside","onSelectItem","group","alt","ImagesBlock","load","useRef","onDrop","useCallback","File","getRootProps","useDropzone","useEffect","current","lightgallerySettings","loop","escKey","keyPress","key","ErrorBlock","errorHide","error","text","show","LoadingMain","App","InitialState","Reducer","action","payload","State","children","useReducer","dispatch","Provider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.294bf5cb.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCWb3EI_lV_lcrgzS3KQuhhTyc1rhv4A-Y\",\n    authDomain: \"photo-gallery-d03d4.firebaseapp.com\",\n    projectId: \"photo-gallery-d03d4\",\n    storageBucket: \"photo-gallery-d03d4.appspot.com\",\n    messagingSenderId: \"7093717672\",\n    appId: \"1:7093717672:web:1dd80d077cf0ce3810909d\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore().collection('images');\n\nexport {projectStorage, projectFirestore};","import {projectFirestore, projectStorage} from \"./config\";\r\n\r\nconst Firebase = {\r\n    getData: (callback, setLoaded = Function()) => {\r\n        projectFirestore\r\n            .orderBy('timestamp', 'asc')\r\n            .onSnapshot(snap => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id});\r\n                });\r\n                callback(documents);\r\n                setLoaded(true);\r\n            });\r\n    },\r\n    addFile: (file, imageSize, setLoaded = Function()) => {\r\n        let fileName = Date.now() + file.name;\r\n        let storageRef = projectStorage.ref(fileName);\r\n\r\n        storageRef.put(file).then(async () => {\r\n            const imgSrc = await storageRef.getDownloadURL();\r\n            const timestamp = Date.now();\r\n            projectFirestore.add({\r\n                url: imgSrc,\r\n                timestamp: timestamp,\r\n                width: imageSize.width,\r\n                height: imageSize.height\r\n            }).then(() => {\r\n                setLoaded(true);\r\n            })\r\n        })\r\n    },\r\n    deleteFile: (id, url, setLoaded = Function()) => {\r\n        setTimeout(() => {\r\n            projectFirestore.doc(id).delete().then(() => {\r\n                projectStorage.refFromURL(url).delete().then(() => {\r\n                    setLoaded(true);\r\n                })\r\n            });\r\n        }, 300);//установлена искусственная задержка для воспроизведения анимации выполнения операции\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Firebase;","import Firebase from \"./firebase\";\n\nclass UploadHandler {\n    constructor(errorCallback, successCallback) {\n        this.errorCallback = errorCallback;\n        this.successCallback = successCallback;\n    }\n\n    /**\n     * В зависимости от способа добавления - обрабатываем и загружаем файл\n     * @param uploaded\n     */\n    upload = (uploaded) => {\n        UploadInfo.identifyUploadType(uploaded,\n            () => {\n                this.#uploadAsFile(uploaded);\n            },\n            () => {\n                this.#uploadByUrl(uploaded);\n            }\n        )\n    }\n\n    /**\n     * Добавляем изображение, либо перебираем изображения в json\n     * @param uploaded\n     */\n    #uploadAsFile = (uploaded) => {\n        uploaded.map((file) => {\n            UploadInfo.checkFile(\n                file,\n                async () => {\n                    if (file.type === 'application/json') {\n                        this.#getDataFromJson(await UploadInfo.convertFiletoJson(file));\n                    } else {\n                        this.#uploadImgFile(file);\n                    }\n                },\n                (e) => this.errorCallback(e)\n            )\n        })\n    }\n\n    /**\n     * Преобразовываем ссылку в файл или в json данные\n     * @param url\n     * @param size\n     */\n    #uploadByUrl = (url, size = {}) => {\n        UploadInfo.checkUrl(\n            url,\n            () => {\n                const type = UploadInfo.getFileTypeByUrl(url);\n                fetch(url).then(res => {\n                    return type !== 'json' ? res.blob() : res.json();\n                }).then(result => {\n                    result.name = UploadInfo.getFileNameByUrl(url);\n\n                    if (type !== 'json') {\n                        this.#uploadImgFile(result, size);\n                    } else {\n                        this.#getDataFromJson(result);\n                    }\n                })\n            },\n            (e) => this.errorCallback(e)\n        )\n    }\n\n    /**\n     * Перебираем данные JSON файла\n     * @param result\n     */\n    #getDataFromJson = (result) => {\n        UploadInfo.checkJSON(result,\n            () => {\n                result[UploadInfo.jsonImageArrName].map(data => {\n                    const {url, width, height} = data;\n                    this.#uploadByUrl(url, {width, height});\n                })\n            },\n            (e) => this.errorCallback(e)\n        )\n    }\n\n    /**\n     * Отправляем преобразованный файл изображения в firebase, предварительно определив масштаб, в случае, если не задан\n     * @param file\n     * @param size\n     * @returns {Promise<void>}\n     */\n    #uploadImgFile = async (file, size = {}) => {\n        let imageSize;\n        if (size.width > 0 && size.height > 0) {\n            imageSize = size;\n        } else {\n            imageSize = await UploadInfo.getImageFileSize(file);\n        }\n\n        Firebase.addFile(file, imageSize, (e) => this.successCallback(e));\n    }\n}\n\n\nconst UploadInfo = {\n    allowedDropTypes: ['image/png', 'image/jpeg', 'application/json'],\n    allowedUrlTypes: ['json', 'png', 'jpg', 'jpeg'],\n    maxFileSizeInMb: 5,\n    jsonImageArrName: 'galleryImages',\n    /**\n     * Определяем каким способом загружают файл\n     * @param upload\n     * @param fileCallback\n     * @param urlCallback\n     */\n    identifyUploadType: function (upload, fileCallback, urlCallback) {\n        if (UploadInfo.isFile(upload[0])) {\n            fileCallback();\n        } else {\n            urlCallback();\n        }\n    },\n    /**\n     * Проверяем URL на корректность\n     * @param url\n     * @param callback - отработка функции в случае отсутствия ошибок\n     * @param errorCallback - отработка callback функции демонстрации ошибки\n     */\n    checkUrl: function (url, callback, errorCallback) {\n        let errorText = false;\n\n        if (!this.isCorrectUrl(url)) {\n            errorText = `Incorrect URL. Allowed types: ${this.allowedUrlTypes.join(', ')}`;\n        }\n        errorText ? errorCallback(errorText) : callback();\n    },\n    /**\n     * Проверка файла на корректность\n     * @param file\n     * @param callback\n     * @param errorCallback\n     */\n    checkFile: function (file, callback, errorCallback) {\n        let errorText = false;\n\n        if (!this.allowedDropTypes.includes(file.type)) {\n            errorText = `Allowed types: ${this.allowedUrlTypes.join(', ')}`;\n        } else if (file.size > (this.maxFileSizeInMb * 1024 * 1024)) {\n            errorText = `Max File Size: ${this.maxFileSizeInMb}mb`;\n        }\n        errorText ? errorCallback(errorText) : callback();\n    },\n    /**\n     * Проверка файла JSON, на корректность содержимого формата данных\n     * @param data\n     * @param callback\n     * @param errorCallback\n     */\n    checkJSON: function (data, callback, errorCallback) {\n        let errorText = false;\n\n        if (!this.isCorrectJsonFormat(data)) {\n            errorText = `Incorrect JSON Format`;\n        }\n        errorText ? errorCallback(errorText) : callback();\n    },\n    /**\n     * Получаем масштаб изображения\n     * @param file\n     * @returns {Promise<unknown>}\n     */\n    getImageFileSize: function (file) {\n        const img = new Image();\n        var _URL = window.URL || window.webkitURL;\n        var objectUrl = _URL.createObjectURL(file);\n\n        const promise = new Promise((resolve, reject) => {\n            img.onload = () => {\n                const width = img.naturalWidth;\n                const height = img.naturalHeight;\n                resolve({width, height});\n            };\n            img.onerror = reject;\n        });\n        img.src = objectUrl;\n        return promise;\n    },\n    /**\n     * Преобразовываем json файл в читаемый вид\n     * @param file\n     * @returns {Promise<unknown>}\n     */\n    convertFiletoJson: function (file) {\n        let fr = new FileReader();\n        return new Promise((resolve, reject) => {\n            fr.onload = function receivedText(e) {\n                let lines = e.target.result;\n                let newArr = JSON.parse(lines);\n                resolve(newArr);\n            };\n            fr.onerror = reject;\n            fr.readAsText(file);\n        });\n    },\n    isCorrectJsonFormat: function (result) {\n        if (result[this.jsonImageArrName].length &&\n            result[this.jsonImageArrName][0].width > 0 &&\n            result[this.jsonImageArrName][0].height > 0 &&\n            result[this.jsonImageArrName][0].url\n        ) {\n            return true;\n        }\n    },\n    isFile: file => {\n        if (typeof file == 'object' && file.name && file.size > 0) {\n            return true;\n        }\n    },\n    isCorrectUrl: function (url) {\n        const awdTypes = new RegExp(this.allowedUrlTypes.join(\"|\"));\n        const myRegex = new RegExp(`(http)?s?:?(\\/\\/[^\"']*\\.(?:${awdTypes.source}))`, \"i\");\n        return myRegex.test(url);\n    },\n    getFileNameByUrl: url => {\n        return url.substring(url.lastIndexOf('/') + 1);\n    },\n    getFileTypeByUrl: url => {\n        return url.split(/[#?]/)[0].split('.').pop().trim();\n    },\n}\n\n/**\n * @param uploadData\n * @param errorCallback\n * @param successCallback\n */\nexport const upload = (\n    uploadData,\n    errorCallback = Function(),\n    successCallback = Function()\n) => {\n    const uploadFile = new UploadHandler(errorCallback, successCallback);\n    uploadFile.upload(uploadData);\n}","import React from 'react';\r\n\r\nexport const Context = React.createContext();","import React, {useContext, useState} from 'react';\nimport {upload} from \"../../utils/UploadHandlers\";\nimport './style.scss';\nimport {Context} from \"../../context/Context\";\n\n\nconst UploadForm = () => {\n    const {uploadData, stopLoading, errorShow} = useContext(Context);\n    const [url, setUrl] = useState(\"\");\n\n    const addByUrl = (e) => {\n        e.preventDefault();\n        if (url) {\n            uploadData();\n            upload(url, errorShow, stopLoading);\n        }\n        setUrl(\"\");\n    }\n\n    return (\n        <form className=\"upload-form\">\n            <input className='upload-form__element'\n                   type=\"text\"\n                   onChange={e => setUrl(e.target.value)}\n                   value={url}\n                   placeholder='Вставьте URL изображения или json-файл с данными'\n            />\n            <button\n                className='upload-form__element'\n                onClick={e => addByUrl(e)}\n            >\n                Загрузить\n            </button>\n        </form>\n    );\n}\n\nexport default UploadForm;","import './style.scss';\r\n\r\nclass FlexibleGallery {\r\n    constructor(gallery, params) {\r\n        this.allGalleryWidth = gallery.clientWidth;\r\n        this.allGalleryHeight = 0;\r\n        this.maxRowHeight = params.maxRowHeight;\r\n        this.marginElement = params.marginElement;\r\n        this.selectorElement = params.selectorElement;\r\n        this.gallery = gallery;\r\n        this.row = {\r\n            elements: [],\r\n            height: 0,\r\n            ratio: 0,\r\n            widthWithoutMargin: 0\r\n        };\r\n        this.mediaMaxRowHeight = params.mediaMaxRowHeight;\r\n        this.imgPositionTop = 0;\r\n        this.preparedSizing = params.preparedSizing;\r\n        this.imgData = [];\r\n    }\r\n\r\n    /**\r\n     * Инициализация вычислений\r\n     */\r\n    init = function () {\r\n        const elements = this.gallery.querySelectorAll(this.selectorElement);\r\n\r\n        this.gallery.classList.add(\"flexible-gallery\");\r\n        this.maxRowHeight = this.#getCurMaxRowHeight(this.allGalleryWidth);\r\n\r\n        let arrElements = this.preparedSizing;\r\n        if (!this.preparedSizing) {\r\n            arrElements = [...elements];\r\n        }\r\n\r\n        arrElements.map((element, i) => {\r\n            elements[i].classList.add(\"flexible-gallery__item\");\r\n\r\n            let img = element;\r\n            if (!this.preparedSizing) {\r\n                img = element.querySelectorAll('img')[0];\r\n            }\r\n\r\n            let imgRatio = img.width / img.height;//получаем соотношение (напр. 4/3 = ~1.333)\r\n            if (!this.preparedSizing) {\r\n                imgRatio = img.naturalWidth / img.naturalHeight\r\n            }\r\n\r\n            this.row.widthWithoutMargin = this.allGalleryWidth - ((this.row.elements.length - 1) * this.marginElement) - this.marginElement;//ширина блока минус отступы от кол-ва элементов\r\n\r\n            this.row.elements.push(img);//добавляем элементы в массив текущей строки\r\n            this.row.ratio += imgRatio;//добавляем значение соотношения изображения к общему значению соотношения в строке\r\n\r\n            if (this.maxRowHeight > (this.row.widthWithoutMargin / this.row.ratio)) {//если высота строки с сохранением пропорций изображений внутри неё, меньше чем максимально-заданная высота строки\r\n                this.#rowEdit();\r\n            } else if ((elements.length - 1) === i && this.row.elements.length) {//в случае если элемент последний и при этом текущая строка не обработана\r\n                this.#rowEdit(true);\r\n            }\r\n        })\r\n\r\n        this.#reStyleElements(elements);\r\n        this.#imgOnLoad(elements);\r\n    }\r\n\r\n\r\n    /**\r\n     * Работа с элементами строки\r\n     * @param lastRow\r\n     */\r\n    #rowEdit = function (lastRow = false) {\r\n        let imgWidthNew, imgHeightNew;\r\n        let imgPositionLeft = 0;\r\n\r\n        if (!lastRow) {\r\n            this.row.height = this.row.widthWithoutMargin / this.row.ratio;//получаем высоту строки\r\n        } else {\r\n            this.row.height = this.maxRowHeight;\r\n        }\r\n\r\n        this.row.elements.map((imgElement, i) => {\r\n\r\n            let imgRatio = imgElement.width / imgElement.height;//получаем соотношение (напр. 4/3 = ~1.333)\r\n            if (!this.preparedSizing) {\r\n                imgRatio = imgElement.naturalWidth / imgElement.naturalHeight\r\n            }\r\n\r\n            if (!lastRow) {\r\n                imgWidthNew = this.row.height * imgRatio;//ширина элемента равна соотношению элемента*высоту строки\r\n                imgHeightNew = this.row.height;\r\n            } else {\r\n                imgWidthNew = this.maxRowHeight * imgRatio;//задаём изображению ширину исходя из его соотношения и макс. высоты строки\r\n                imgHeightNew = this.maxRowHeight;\r\n            }\r\n\r\n            this.imgData.push({\r\n                imgElement,\r\n                imgWidthNew,\r\n                imgHeightNew,\r\n                imgPositionLeft,\r\n                imgPositionTop: this.imgPositionTop\r\n            });\r\n            imgPositionLeft += imgWidthNew + this.marginElement;\r\n        })\r\n        this.imgPositionTop += this.row.height + this.marginElement;\r\n        this.allGalleryHeight += this.row.height + this.marginElement;\r\n\r\n        this.#resetRow();\r\n    }\r\n\r\n    /**\r\n     * Стилизация элементов\r\n     * @param elements\r\n     */\r\n    #reStyleElements = function (elements) {\r\n        const measure = 'px';\r\n        this.gallery.style.height = this.allGalleryHeight + measure;\r\n        this.imgData.map((imageData, i) => {\r\n            elements[i].style.width = imageData.imgWidthNew + measure;\r\n            elements[i].style.height = imageData.imgHeightNew + measure;\r\n            elements[i].style.left = imageData.imgPositionLeft + measure;\r\n            elements[i].style.top = imageData.imgPositionTop + measure;\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Фиксация загрузки\r\n     * @param elements\r\n     */\r\n    #imgOnLoad = function (elements) {\r\n        [...elements].map((element, i) => {\r\n            const img = element.querySelectorAll('img')[0];\r\n            img.onload = () => {\r\n                element.classList.add(\"flexible-gallery__item--active\");\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Сброс параметров строки\r\n     */\r\n    #resetRow = function () {\r\n        this.row.elements = [];\r\n        this.row.ratio = 0;\r\n    }\r\n\r\n    /**\r\n     * Получаем показатель максимальной высоты строки, в зависимости от текущей общей ширины блока\r\n     * @param curWidth - текущая ширина блока\r\n     * @returns {*}\r\n     */\r\n    #getCurMaxRowHeight = function (curWidth) {\r\n        const points = Object.keys(this.mediaMaxRowHeight);\r\n\r\n        for (let i = 0; i < points.length; i++) {\r\n            if (points[i] > curWidth) {\r\n                return this.mediaMaxRowHeight[points[i]];\r\n            }\r\n        }\r\n        return this.maxRowHeight;\r\n    }\r\n\r\n    /**\r\n     * Параметры по умолчанию\r\n     * @type {{preparedSizing: boolean, marginElement: number, maxRowHeight: number, mediaMaxRowHeight: {\"320\": number, \"480\": number}, selectorElement: string}}\r\n     */\r\n    static defaultParams = {\r\n        maxRowHeight: 200,\r\n        mediaMaxRowHeight: {\r\n            '320': 428,\r\n            '480': 640\r\n        },\r\n        marginElement: 10,\r\n        selectorElement: \"a\",\r\n        preparedSizing: false\r\n    }\r\n}\r\n\r\n/**\r\n * @param block - блок с элементами\r\n * @param params - объект с ключами параметров плагина\r\n */\r\nconst initGallery = function (block, params = {}) {\r\n    let handlerFunction;\r\n\r\n    (handlerFunction = () => {\r\n        if (!block) {\r\n            return false;\r\n        }\r\n        params = Object.assign(FlexibleGallery.defaultParams, params);//задаём параметры из параметров по-умолчанию, в случае отсутствия своих\r\n        const gallery = new FlexibleGallery(block, params);\r\n        gallery.init();\r\n    })();\r\n\r\n    ['resize'].map(e => {\r\n        window.addEventListener(e, () => {\r\n            handlerFunction();\r\n        })\r\n    })\r\n}\r\n\r\nexport default initGallery;","import React from 'react';\r\nimport './style.scss';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"loading\">\r\n            <div className=\"loading__points-block\">\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React, {useContext} from 'react';\r\nimport Firebase from \"../../utils/firebase\";\r\nimport Loading from \"../Loading\";\r\nimport './style.scss';\r\nimport {Context} from \"../../context/Context\";\r\nimport {LightgalleryItem, useLightgallery} from \"react-lightgallery\";\r\nimport useOnclickOutside from \"react-cool-onclickoutside\";\r\n\r\nconst Item = ({id, url, index}) => {\r\n    const {deleteData, selectItem, stopLoading, state: {selected}} = useContext(Context);\r\n\r\n    const {openGallery} = useLightgallery();\r\n\r\n    const selectOut = useOnclickOutside(() => {\r\n        selectItem(null)\r\n    });\r\n\r\n    const onSelectItem = (e, id) => {\r\n        e.preventDefault();\r\n        selectItem(id)\r\n    }\r\n\r\n    return (\r\n        <div className=\"images-block__item item\"\r\n             onClick={e => onSelectItem(e, id)}\r\n             ref={selectOut}\r\n        >\r\n            <Loading/>\r\n            <div className={\r\n                `item__select-panel \r\n                ${selected === id ? 'item__select-panel--active' : ''}`\r\n            }>\r\n                <div className=\"item__delete\"\r\n                     onClick={() => {\r\n                         deleteData();\r\n                         Firebase.deleteFile(id, url, stopLoading)\r\n                     }}\r\n                >\r\n                    &nbsp;\r\n                </div>\r\n                <div onClick={() => {\r\n                    openGallery(\"group\", index)\r\n                }}\r\n                     className='item__show'\r\n                >\r\n                    &nbsp;\r\n                </div>\r\n                <LightgalleryItem group={\"group\"} src={url}>&nbsp;</LightgalleryItem>\r\n            </div>\r\n            <img src={url} alt=\"uploaded pic\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Item;","import React, {useEffect, useRef, useCallback, useContext} from 'react';\nimport Firebase from \"../../utils/firebase\";\nimport {useDropzone} from 'react-dropzone';\nimport initGallery from \"../../utils/flexibleGallery\";\nimport {upload} from \"../../utils/UploadHandlers\";\nimport Item from \"../Item\";\nimport './style.scss';\nimport {Context} from \"../../context/Context\";\n\nimport \"lightgallery.js/dist/css/lightgallery.css\";\nimport {LightgalleryProvider} from \"react-lightgallery\";\n\nconst ImagesBlock = () => {\n    const {uploadData, getData, stopLoading, errorShow, state: {data, load}} = useContext(Context);\n    const ref = useRef(null);\n\n    const onDrop = useCallback(File => {\n        uploadData();\n        upload(File, errorShow, stopLoading);\n    }, []);\n\n    const {getRootProps} = useDropzone({\n        onDrop\n    });\n\n    useEffect(() => {\n        return Firebase.getData(getData, stopLoading);\n    }, []);\n\n    useEffect(() => {\n        initGallery(ref.current, {\n            preparedSizing: data,\n            selectorElement: 'div.images-block__item',\n            marginElement: 7,\n            maxRowHeight: 240,\n            mediaMaxRowHeight: {\n                '320': 480,\n                '420': 568,\n                '480': 680\n            }\n        })\n\n    }, [data]);\n\n    return (\n        <div {...getRootProps()} className=\"images-block\" ref={ref}>\n            {\n                !data.length && !load\n                &&\n                <div className=\"images-block__drop-area drop-zone\">\n                    <span className=\"drop-zone__icon\">&nbsp;</span>\n                    <span className=\"drop-zone__descr\">\n                        Drag & Drop files here\n                    </span>\n                </div>\n            }\n\n            <LightgalleryProvider\n                lightgallerySettings={{\n                    loop: true,\n                    escKey: true,\n                    keyPress: true\n                }}\n            >\n                {\n                    data && data.map((img, i) => (\n                        <Item index={i} key={img.id} {...img} />\n                    ))\n                }\n            </LightgalleryProvider>\n        </div>\n    )\n}\n\nexport default ImagesBlock;","import React, {useContext} from 'react';\r\nimport './style.scss';\r\nimport {Context} from \"../../context/Context\";\r\n\r\nconst ErrorBlock = () => {\r\n    const {errorHide, state: {error: {text, show}}} = useContext(Context);\r\n\r\n    return (\r\n        <div className={`error-block ${show && 'error-block--show'}`}>\r\n            <div className=\"error-block__window\">\r\n                <p className=\"error-block__text\">{text}</p>\r\n                <button\r\n                    className=\"error-block__btn\"\r\n                    onClick={() => errorHide()}>\r\n                    Ok\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorBlock;","import React from 'react';\r\nimport './style.scss';\r\n\r\nconst LoadingMain = () => {\r\n    return (\r\n        <div className=\"loading-main\">\r\n            <div className='loading-main__anim'>\r\n                <div className=\"loading-main__pulse\">\r\n                    <div></div>\r\n                    <div></div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoadingMain;","import React, {useContext} from 'react';\nimport UploadForm from '../UploadForm';\nimport ImagesBlock from '../ImagesBlock';\nimport ErrorBlock from \"../ErrorBlock\";\nimport LoadingMain from \"../LoadingMain\";\n\nimport {Context} from \"../../context/Context\";\n\nimport './style.scss'\n\nconst App = () => {\n    const {state: {load}} = useContext(Context);\n\n    return (\n        <main>\n            <UploadForm/>\n            <ImagesBlock/>\n            <ErrorBlock/>\n            {\n                load && <LoadingMain/>\n            }\n        </main>\n    );\n}\n\nexport default App;\n","import {ERROR_SHOW, ERROR_HIDE, DATA_GET, DATA_UPLOAD, DATA_DELETE, STOP_LOADING, SELECT_ITEM} from \"./Types\";\r\n\r\nexport const InitialState = {\r\n    error: {\r\n        show: false,\r\n        text: \"\"\r\n    },\r\n    load: true,\r\n    data: [],\r\n    selected: null\r\n}\r\n\r\nexport const Reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ERROR_SHOW:\r\n            return {\r\n                ...state,\r\n                load: false,\r\n                error: {\r\n                    show: true,\r\n                    text: action.payload\r\n                }\r\n            };\r\n        case ERROR_HIDE:\r\n            return {\r\n                ...state,\r\n                error: {\r\n                    show: false,\r\n                    text: InitialState.error.text\r\n                }\r\n            };\r\n        case DATA_GET:\r\n            return {\r\n                ...state,\r\n                data: action.payload,\r\n                load: false\r\n            };\r\n        case DATA_UPLOAD:\r\n            return {\r\n                ...state,\r\n                load: true\r\n            };\r\n        case DATA_DELETE:\r\n            return {\r\n                ...state,\r\n                load: true\r\n            };\r\n        case STOP_LOADING:\r\n            return {\r\n                ...state,\r\n                load: false\r\n            };\r\n        case SELECT_ITEM:\r\n            return {\r\n                ...state,\r\n                selected: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","export const ERROR_SHOW = \"ERROR_SHOW\";\r\nexport const ERROR_HIDE = \"ERROR_HIDE\";\r\nexport const DATA_GET = \"DATA_GET\";\r\nexport const DATA_UPLOAD = \"DATA_UPLOAD\";\r\nexport const DATA_DELETE = \"DATA_DELETE\";\r\nexport const STOP_LOADING = \"STOP_LOADING\";\r\nexport const SELECT_ITEM = \"SELECT_ITEM\";\r\n","import React, {useReducer} from 'react';\r\nimport {Context} from './Context';\r\nimport {Reducer, InitialState} from \"./Reducer\";\r\nimport {ERROR_SHOW, ERROR_HIDE, DATA_GET, DATA_UPLOAD, DATA_DELETE, STOP_LOADING, SELECT_ITEM} from \"./Types\";\r\n\r\nconst State = ({children}) => {\r\n    const [state, dispatch] = useReducer(Reducer, InitialState);\r\n\r\n    const errorShow = (text) => {\r\n        dispatch({\r\n            type: ERROR_SHOW,\r\n            payload: text\r\n        })\r\n    };\r\n\r\n    const errorHide = () => {\r\n        dispatch({\r\n            type: ERROR_HIDE\r\n        })\r\n    };\r\n\r\n    const stopLoading = () => {\r\n        dispatch({\r\n            type: STOP_LOADING\r\n        })\r\n    }\r\n\r\n    const getData = (data) => {\r\n        dispatch({\r\n            type: DATA_GET,\r\n            payload: data\r\n        })\r\n    };\r\n\r\n    const uploadData = () => {\r\n        dispatch({\r\n            type: DATA_UPLOAD\r\n        })\r\n    };\r\n\r\n    const deleteData = () => {\r\n        dispatch({\r\n            type: DATA_DELETE\r\n        })\r\n    };\r\n\r\n    const selectItem = (id) => {\r\n        dispatch({\r\n            type: SELECT_ITEM,\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Context.Provider\r\n            value={{\r\n                errorShow,\r\n                errorHide,\r\n                stopLoading,\r\n                getData,\r\n                uploadData,\r\n                deleteData,\r\n                selectItem,\r\n                state: state\r\n            }}\r\n        >\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n};\r\n\r\nexport default State;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.scss';\nimport App from './components/App';\nimport State from \"./context/State\";\n\nReactDOM.render(\n    <State>\n        <App/>\n    </State>,\n    document.getElementById('root')\n);"],"sourceRoot":""}